package anti.messanger.sxdpandoram;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.SocketException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class ClientHandler implements Runnable {

    private final Socket clientSocket;
    private final List<ClientHandler> clients; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    private PrintWriter out;
    private BufferedReader in;
    private String clientName;

    // –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");

    public ClientHandler(Socket socket, List<ClientHandler> clients) {
        this.clientSocket = socket;
        this.clients = clients;
    }

    @Override
    public void run() {
        try {
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

            // –ü–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–≤–æ–µ –∏–º—è
            clientName = in.readLine();
            if (clientName == null || clientName.isEmpty()) {
                clientName = "–ê–Ω–æ–Ω–∏–º";
            }
            System.out.println("üó£Ô∏è " + clientName + " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.");
            broadcastMessage(String.format("üé≠ - üòâ, [%s]\n%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É", getTimestamp(), clientName));

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                String formattedMessage = String.format("üé≠ - üòâ, [%s]\n%s –Ω–∞–ø–∏—Å–∞–ª: %s", getTimestamp(), clientName, inputLine);
                System.out.println("üí¨ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç " + clientName + ": " + inputLine);
                broadcastMessage(formattedMessage);
            }
        } catch (SocketException e) {
            System.out.println("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å " + clientName + " –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ.");
        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: " + e.getMessage());
        } finally {
            // –ë–ª–æ–∫ finally –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if (clientName != null) {
                System.out.println("üëã " + clientName + " –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.");
                clients.remove(this);
                broadcastMessage(String.format("üé≠ - üòâ, [%s]\n%s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", getTimestamp(), clientName));
            }
            try {
                if (out != null) out.close();
                if (in != null) in.close();
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    private void broadcastMessage(String message) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ
        synchronized (clients) {
            for (ClientHandler client : clients) {
                client.out.println(message);
            }
        }
    }

    private String getTimestamp() {
        return LocalDateTime.now().format(dtf);
    }
}