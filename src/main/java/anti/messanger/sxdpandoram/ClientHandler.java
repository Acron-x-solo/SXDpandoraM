package anti.messanger.sxdpandoram;

import java.io.*;
import java.net.Socket;
import java.net.SocketException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ClientHandler implements Runnable {

    private final Socket clientSocket;
    private final List<ClientHandler> clients;
    private final DatabaseManager databaseManager;
    private final FileTransferManager fileTransferManager;
    private PrintWriter out;
    private BufferedReader in;
    private String clientName;
    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");

    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // –ö–ª—é—á: "sender->recipient::filename", –ó–Ω–∞—á–µ–Ω–∏–µ: –ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
    private static final Map<String, FileOutputStream> activeFileUploads = new ConcurrentHashMap<>();
    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Ö –ø–µ—Ä–µ–¥–∞—Ç—å –≤ FileTransferManager
    private static final Map<String, File> tempFiles = new ConcurrentHashMap<>();


    public ClientHandler(Socket socket, List<ClientHandler> clients, DatabaseManager dbManager, FileTransferManager ftManager) {
        this.clientSocket = socket;
        this.clients = clients;
        this.databaseManager = dbManager;
        this.fileTransferManager = ftManager;
    }

    public String getClientName() { return clientName; }

    @Override
    public void run() {
        try {
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

            // –≠–¢–ê–ü 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç.–∫. –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
            while (true) {
                String line = in.readLine();
                if (line == null) return;
                String[] parts = line.split(" ", 3);
                String command = parts[0];
                if ("LOGIN".equals(command) && parts.length == 3) {
                    if (databaseManager.verifyUser(parts[1], parts[2])) {
                        this.clientName = parts[1];
                        out.println("LOGIN_SUCCESS");
                        break;
                    } else { out.println("LOGIN_FAILED"); }
                } else if ("REGISTER".equals(command) && parts.length == 3) {
                    if (databaseManager.registerUser(parts[1], parts[2])) {
                        out.println("REGISTER_SUCCESS");
                    } else { out.println("REGISTER_FAILED_USER_EXISTS"); }
                }
            }

            // –≠–¢–ê–ü 2: –í—Ö–æ–¥ –≤ —á–∞—Ç –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            System.out.println("üó£Ô∏è " + clientName + " –≤–æ—à–µ–ª –≤ —á–∞—Ç.");
            synchronized (clients) {
                clients.add(this);
                broadcastMessage(String.format("SYS_MSG¬ß¬ß%s¬ß¬ß%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É", getTimestamp(), clientName));
                sendUsersListToAll();
            }

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                // --- –ï–î–ò–ù–´–ô –ù–ê–î–ï–ñ–ù–´–ô –ü–ê–†–°–ï–† –î–õ–Ø –í–°–ï–• –ö–û–ú–ê–ù–î –í –ß–ê–¢–ï ---
                String[] parts = inputLine.split("¬ß¬ß");
                String command = parts[0];

                switch (command) {
                    case "MSG": // FORMAT: MSG¬ß¬ßtext
                        if (parts.length >= 2) {
                            broadcastMessage(String.format("PUB_MSG¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s", getTimestamp(), this.clientName, parts[1]));
                        }
                        break;
                    case "PM": // FORMAT: PM¬ß¬ßrecipient¬ß¬ßtext
                        if (parts.length >= 3) {
                            sendPrivateMessage(parts[1], parts[2]);
                        }
                        break;
                    case "FILE_OFFER": // FORMAT: FILE_OFFER¬ß¬ßrecipient¬ß¬ßfilename¬ß¬ßfilesize¬ß¬ßpreviewdata
                        if (parts.length >= 5) {
                            handleFileOffer(parts[1], parts[2], Long.parseLong(parts[3]), parts[4]);
                        }
                        break;
                    case "FILE_ACCEPT": // FORMAT: FILE_ACCEPT¬ß¬ßsender¬ß¬ßfilename
                        if (parts.length >= 3) {
                            handleFileAccept(parts[1], parts[2]);
                        }
                        break;
                    case "FILE_DECLINE": // FORMAT: FILE_DECLINE¬ß¬ßsender¬ß¬ßfilename
                        if (parts.length >= 3) {
                            handleFileDecline(parts[1], parts[2]);
                        }
                        break;
                    case "FILE_CHUNK": // FORMAT: FILE_CHUNK¬ß¬ßrecipient¬ß¬ßfilename¬ß¬ßdata
                        if (parts.length >= 4) {
                            handleFileChunk(parts[1], parts[2], parts[3]);
                        }
                        break;
                    case "FILE_END": // FORMAT: FILE_END¬ß¬ßrecipient¬ß¬ßfilename
                        if (parts.length >= 3) {
                            handleFileEnd(parts[1], parts[2]);
                        }
                        break;
                }
            }
        } catch (SocketException e) {
            System.out.println("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º " + (clientName != null ? clientName : "") + " —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (clientName != null) {
                synchronized (clients) { clients.remove(this); }
                System.out.println("üëã " + clientName + " –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.");
                broadcastMessage(String.format("SYS_MSG¬ß¬ß%s¬ß¬ß%s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", getTimestamp(), clientName));
                sendUsersListToAll();
                // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                activeFileUploads.forEach((key, stream) -> {
                    if (key.startsWith(clientName + "->") || key.contains("->" + clientName + "::")) {
                        try { stream.close(); } catch (IOException e) { e.printStackTrace(); }
                        File file = tempFiles.remove(key);
                        if (file != null) file.delete();
                    }
                });
            }
        }
    }

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    private void handleFileOffer(String recipientName, String filename, long filesize, String previewData) {
        ClientHandler recipient = findClientByName(recipientName);
        if (recipient != null) {
            recipient.sendMessage(String.format("FILE_INCOMING¬ß¬ß%s¬ß¬ß%s¬ß¬ß%d¬ß¬ß%s", this.clientName, filename, filesize, previewData));
        }
    }

    // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —Ñ–∞–π–ª. –ì–æ–≤–æ—Ä–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.
    private void handleFileAccept(String originalSenderName, String filename) {
        ClientHandler sender = findClientByName(originalSenderName);
        if (sender != null) {
            System.out.println(clientName + " –ø—Ä–∏–Ω—è–ª —Ñ–∞–π–ª '" + filename + "' –æ—Ç " + originalSenderName + ". –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∫—É.");
            sender.sendMessage(String.format("UPLOAD_START¬ß¬ß%s¬ß¬ß%s", this.clientName, filename));
        }
    }

    private void handleFileDecline(String originalSenderName, String filename) {
        ClientHandler sender = findClientByName(originalSenderName);
        if (sender != null) {
            sender.sendMessage(String.format("SYS_MSG¬ß¬ß%s¬ß¬ß%s –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à —Ñ–∞–π–ª '%s'", getTimestamp(), this.clientName, filename));
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—à–µ–¥—à–∏–π –∫—É—Å–æ—á–µ–∫ —Ñ–∞–π–ª–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    private void handleFileChunk(String recipientName, String fileName, String base64ChunkData) {
        String fileKey = this.clientName + "->" + recipientName + "::" + fileName;
        try {
            FileOutputStream fos = activeFileUploads.computeIfAbsent(fileKey, key -> {
                try {
                    File tempFile = File.createTempFile("chat_upload_", "_" + fileName);
                    tempFiles.put(key, tempFile);
                    System.out.println("–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: " + tempFile.getAbsolutePath());
                    return new FileOutputStream(tempFile);
                } catch (IOException e) { throw new UncheckedIOException(e); }
            });
            byte[] decodedChunk = Base64.getDecoder().decode(base64ChunkData);
            fos.write(decodedChunk);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FILE_CHUNK –¥–ª—è –∫–ª—é—á–∞ " + fileKey + ": " + e.getMessage());
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Å–ª–∞—Ç—å –∫—É—Å–æ—á–∫–∏
    private void handleFileEnd(String recipientName, String fileName) {
        String fileKey = this.clientName + "->" + recipientName + "::" + fileName;
        FileOutputStream fos = activeFileUploads.remove(fileKey);
        File tempFile = tempFiles.remove(fileKey);

        if (fos != null && tempFile != null) {
            try {
                fos.close();
                System.out.println("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '" + fileName + "' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: " + tempFile.length() + " –±–∞–π—Ç.");
                ClientHandler recipient = findClientByName(recipientName);
                if (recipient != null) {
                    fileTransferManager.prepareDownloadLink(tempFile, fileName, recipient);
                } else {
                    tempFile.delete(); // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã—à–µ–ª, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private ClientHandler findClientByName(String name) {
        synchronized(clients) {
            for (ClientHandler client : clients) {
                if (client.clientName.equals(name)) return client;
            }
        }
        return null;
    }

    private void sendPrivateMessage(String recipientName, String message) {
        ClientHandler recipientHandler = findClientByName(recipientName);
        String formattedMsg = String.format("PRIV_MSG¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s", getTimestamp(), this.clientName, recipientName, message);
        if (recipientHandler != null) {
            recipientHandler.sendMessage(formattedMsg);
        }
        this.sendMessage(formattedMsg);
    }

    private void sendUsersListToAll() {
        StringBuilder usersList = new StringBuilder("USERS_LIST¬ß¬ß");
        synchronized (clients) {
            for (ClientHandler client : clients) usersList.append(client.clientName).append(",");
        }
        if (usersList.length() > "USERS_LIST¬ß¬ß".length() && usersList.charAt(usersList.length() - 1) == ',') {
            usersList.setLength(usersList.length() - 1);
        }
        broadcastMessage(usersList.toString());
    }

    private void broadcastMessage(String message) {
        synchronized (clients) { for (ClientHandler client : clients) client.sendMessage(message); }
    }

    public void sendMessage(String message) {
        if (out != null) {
            out.println(message);
        }
    }

    private String getTimestamp() {
        return LocalDateTime.now().format(dtf);
    }
}