package anti.messanger.sxdpandoram;

import java.io.*;
import java.net.Socket;
import java.net.SocketException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ClientHandler implements Runnable {

    private final Socket clientSocket;
    private final List<ClientHandler> clients;
    private final DatabaseManager databaseManager;
    private final FileTransferManager fileTransferManager;
    private PrintWriter out;
    private BufferedReader in;
    private String clientName;

    

    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");
    private static final Map<String, FileOutputStream> activeFileUploads = new ConcurrentHashMap<>();
    private static final Map<String, File> tempFiles = new ConcurrentHashMap<>();

    public ClientHandler(Socket socket, List<ClientHandler> clients, DatabaseManager dbManager, FileTransferManager ftManager) {
        this.clientSocket = socket;
        this.clients = clients;
        this.databaseManager = dbManager;
        this.fileTransferManager = ftManager;
    }

    public String getClientName() { return clientName; }
    

    @Override
    public void run() {
        try {
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

            while (true) {
                String line = in.readLine();
                if (line == null) return;
                String[] parts = line.split(" ", 3);
                String command = parts[0];
                if ("LOGIN".equals(command) && parts.length == 3) {
                    if (databaseManager.verifyUser(parts[1], parts[2])) {
                        this.clientName = parts[1];
                        out.println("LOGIN_SUCCESS");
                        break;
                    } else { out.println("LOGIN_FAILED"); }
                } else if ("REGISTER".equals(command) && parts.length == 3) {
                    if (databaseManager.registerUser(parts[1], parts[2])) {
                        out.println("REGISTER_SUCCESS");
                    } else { out.println("REGISTER_FAILED_USER_EXISTS"); }
                }
            }

            System.out.println("üó£Ô∏è " + clientName + " –≤–æ—à–µ–ª –≤ —á–∞—Ç.");
            synchronized (clients) {
                clients.add(this);
                broadcastMessage(String.format("SYS_MSG¬ß¬ß%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É", clientName));
                sendUsersListToAll();
            }

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                String[] parts = inputLine.split("¬ß¬ß");
                String command = parts[0];
                switch (command) {
                    case "MSG":
                        if (parts.length >= 2) broadcastMessage(String.format("PUB_MSG¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s", getTimestamp(), this.clientName, parts[1]));
                        break;
                    case "PM":
                        if (parts.length >= 3) sendPrivateMessage(parts[1], parts[2]);
                        break;
                    case "LIST_USERS":
                        sendUsersListToAll();
                        break;
                    case "FILE_OFFER":
                        if (parts.length >= 5) handleFileOffer(parts[1], parts[2], Long.parseLong(parts[3]), parts[4]);
                        break;
                    case "FILE_ACCEPT":
                        if (parts.length >= 3) handleFileAccept(parts[1], parts[2]);
                        break;
                    case "FILE_DECLINE":
                        if (parts.length >= 3) handleFileDecline(parts[1], parts[2]);
                        break;
                    case "FILE_CHUNK":
                        if (parts.length >= 4) handleFileChunk(parts[1], parts[2], parts[3]);
                        break;
                    case "FILE_END":
                        if (parts.length >= 3) handleFileEnd(parts[1], parts[2]);
                        break;
                    
                    // ==== –ü—Ä–æ—Ñ–∏–ª—å ====
                    case "GET_PROFILE":
                        handleGetProfile();
                        break;
                    case "UPDATE_PROFILE":
                        if (parts.length >= 3) handleUpdateProfile(parts[1], parts[2]);
                        break;
                    case "UPDATE_AVATAR":
                        if (parts.length == 2) handleUpdateAvatar(parts[1]);
                        break;
                    case "UPDATE_AVATAR_CLEAR":
                        handleUpdateAvatar(null);
                        break;
                    // ==== –ì—Ä—É–ø–ø—ã ====
                    case "CREATE_GROUP":
                        if (parts.length >= 3) handleCreateGroup(parts[1], parts[2]);
                        break;
                    case "GET_GROUPS":
                        handleGetGroups();
                        break;
                    case "ADD_MEMBER":
                        if (parts.length >= 3) handleAddMember(Long.parseLong(parts[1]), parts[2]);
                        break;
                    case "REMOVE_MEMBER":
                        if (parts.length >= 3) handleRemoveMember(Long.parseLong(parts[1]), parts[2]);
                        break;
                    case "GROUP_MSG":
                        if (parts.length >= 3) handleGroupMessage(Long.parseLong(parts[1]), parts[2]);
                        break;
                    // ==== –°–µ—Ä–≤–µ—Ä—ã ====
                    case "CREATE_SERVER":
                        if (parts.length >= 3) handleCreateServer(parts[1], parts[2]);
                        break;
                    case "GET_SERVERS":
                        handleGetServers();
                        break;
                    case "ADD_SERVER_MEMBER":
                        if (parts.length >= 3) handleAddServerMember(Long.parseLong(parts[1]), parts[2]);
                        break;
                    case "SERVER_MSG":
                        if (parts.length >= 3) handleServerMessage(Long.parseLong(parts[1]), parts[2]);
                        break;
                 // ==== –ó–≤–æ–Ω–∫–∏ –∏ –∞—É–¥–∏–æ ====
                 case "VOICE_INVITE":
                     if (parts.length >= 2) handleVoiceInvite(parts[1]);
                     break;
                 case "VOICE_ACCEPT":
                     if (parts.length >= 2) handleVoiceAccept(parts[1]);
                     break;
                 case "VOICE_DECLINE":
                     if (parts.length >= 2) handleVoiceDecline(parts[1]);
                     break;
                 case "VOICE_END":
                     if (parts.length >= 2) handleVoiceEnd(parts[1]);
                     break;
                 case "VOICE_FRAME":
                     if (parts.length >= 3) handleVoiceFrame(parts[1], parts[2]);
                     break;
                 // ==== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ ====
                 case "SCREEN_START":
                     if (parts.length >= 2) handleScreenStart(parts[1]);
                     break;
                 case "SCREEN_STOP":
                     if (parts.length >= 2) handleScreenStop(parts[1]);
                     break;
                 case "SCREEN_FRAME":
                     if (parts.length >= 3) handleScreenFrame(parts[1], parts[2]);
                     break;
                }
            }
        } catch (SocketException e) {
            System.out.println("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º " + (clientName != null ? clientName : "") + " —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (clientName != null) {
                

                synchronized (clients) { clients.remove(this); }
                System.out.println("üëã " + clientName + " –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.");
                broadcastMessage(String.format("SYS_MSG¬ß¬ß%s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", clientName));
                sendUsersListToAll();

                activeFileUploads.forEach((key, stream) -> {
                    if (key.startsWith(clientName + "->") || key.contains("->" + clientName + "::")) {
                        try { stream.close(); } catch (IOException ex) { ex.printStackTrace(); }
                        File file = tempFiles.remove(key);
                        if (file != null) file.delete();
                    }
                });
            }
        }
    }

    private void handleGetProfile() {
        UserProfile profile = databaseManager.getUserProfile(this.clientName);
        String avatarBase64 = profile.getAvatarBytes() != null ? Base64.getEncoder().encodeToString(profile.getAvatarBytes()) : "";
        sendMessage(String.format("PROFILE_DATA¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s", escape(profile.getDisplayName()), escape(profile.getStatus()), avatarBase64));
    }

    private void handleUpdateProfile(String displayName, String status) {
        boolean ok = databaseManager.updateUserProfile(this.clientName, unescape(displayName), unescape(status));
        sendMessage("PROFILE_UPDATED¬ß¬ß" + (ok ? "OK" : "ERROR"));
        if (ok) {
            // –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤—Å–µ—Ö –æ —Å–º–µ–Ω–µ –ø—Ä–æ—Ñ–∏–ª—è
            // broadcastMessage("PROFILE_CHANGED¬ß¬ß" + this.clientName);
        }
    }

    private void handleUpdateAvatar(String avatarBase64OrNull) {
        byte[] avatarBytes = null;
        if (avatarBase64OrNull != null && !avatarBase64OrNull.isEmpty()) {
            try {
                avatarBytes = Base64.getDecoder().decode(avatarBase64OrNull);
            } catch (IllegalArgumentException e) {
                sendMessage("AVATAR_UPDATED¬ß¬ßERROR");
                return;
            }
        }
        boolean ok = databaseManager.updateUserAvatar(this.clientName, avatarBytes);
        sendMessage("AVATAR_UPDATED¬ß¬ß" + (ok ? "OK" : "ERROR"));
    }

    private void handleCreateGroup(String groupName, String description) {
        boolean ok = databaseManager.createGroup(groupName, description, this.clientName);
        if (ok) {
            sendMessage("GROUP_CREATED¬ß¬ßOK");
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            broadcastMessage(String.format("SYS_MSG¬ß¬ß–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: %s", groupName));
        } else {
            sendMessage("GROUP_CREATED¬ß¬ßERROR");
        }
    }

    private void handleGetGroups() {
        List<GroupInfo> groups = databaseManager.getUserGroups(this.clientName);
        StringBuilder response = new StringBuilder("GROUPS_LIST¬ß¬ß");
        for (GroupInfo group : groups) {
            response.append(group.getId()).append(":")
                   .append(escape(group.getName())).append(":")
                   .append(escape(group.getDescription())).append(":")
                   .append(group.getCreatedBy()).append(":")
                   .append(group.getCreatedAt()).append(":")
                   .append(group.isAdmin() ? "1" : "0").append(",");
        }
        if (response.charAt(response.length() - 1) == ',') {
            response.setLength(response.length() - 1);
        }
        sendMessage(response.toString());
    }

    private void handleAddMember(long groupId, String username) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
        if (!databaseManager.isGroupAdmin(groupId, this.clientName)) {
            sendMessage("MEMBER_ADDED¬ß¬ßERROR¬ß¬ß–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (!databaseManager.verifyUser(username, "")) { // –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            sendMessage("MEMBER_ADDED¬ß¬ßERROR¬ß¬ß–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        boolean ok = databaseManager.addGroupMember(groupId, username, false);
        if (ok) {
            sendMessage("MEMBER_ADDED¬ß¬ßOK¬ß¬ß" + username);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ClientHandler newMember = findClientByName(username);
            if (newMember != null) {
                GroupInfo groupInfo = databaseManager.getGroupInfo(groupId);
                newMember.sendMessage(String.format("GROUP_INVITE¬ß¬ß%d¬ß¬ß%s¬ß¬ß%s", groupId, groupInfo.getName(), this.clientName));
            }
        } else {
            sendMessage("MEMBER_ADDED¬ß¬ßERROR¬ß¬ß–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞");
        }
    }

    private void handleRemoveMember(long groupId, String username) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã
        if (!databaseManager.isGroupAdmin(groupId, this.clientName)) {
            sendMessage("MEMBER_REMOVED¬ß¬ßERROR¬ß¬ß–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
            return;
        }
        
        // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if (username.equals(this.clientName)) {
            sendMessage("MEMBER_REMOVED¬ß¬ßERROR¬ß¬ß–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è");
            return;
        }
        
        boolean ok = databaseManager.removeGroupMember(groupId, username);
        if (ok) {
            sendMessage("MEMBER_REMOVED¬ß¬ßOK¬ß¬ß" + username);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ClientHandler removedMember = findClientByName(username);
            if (removedMember != null) {
                GroupInfo groupInfo = databaseManager.getGroupInfo(groupId);
                removedMember.sendMessage(String.format("GROUP_REMOVED¬ß¬ß%d¬ß¬ß%s", groupId, groupInfo.getName()));
            }
        } else {
            sendMessage("MEMBER_REMOVED¬ß¬ßERROR¬ß¬ß–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞");
        }
    }

    private void handleGroupMessage(long groupId, String message) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã
        if (!databaseManager.isGroupMember(groupId, this.clientName)) {
            sendMessage("GROUP_MSG_SENT¬ß¬ßERROR¬ß¬ß–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã");
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
        List<String> members = databaseManager.getGroupMembers(groupId);
        String timestamp = getTimestamp();
        String formattedMsg = String.format("GROUP_MSG¬ß¬ß%s¬ß¬ß%s¬ß¬ß%d¬ß¬ß%s", timestamp, this.clientName, groupId, message);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        databaseManager.saveMessage("GROUP", timestamp, this.clientName, "GROUP_" + groupId, message);

        for (String member : members) {
            ClientHandler memberHandler = findClientByName(member);
            if (memberHandler != null) {
                memberHandler.sendMessage(formattedMsg);
            }
        }

        // –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —É–∂–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

    private void handleCreateServer(String serverName, String description) {
        boolean ok = databaseManager.createServer(serverName, description, this.clientName);
        if (ok) {
            sendMessage("SERVER_CREATED¬ß¬ßOK");
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            broadcastMessage(String.format("SYS_MSG¬ß¬ß–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: %s", serverName));
        } else {
            sendMessage("SERVER_CREATED¬ß¬ßERROR");
        }
    }

    private void handleGetServers() {
        List<ServerInfo> servers = databaseManager.getUserServers(this.clientName);
        StringBuilder response = new StringBuilder("SERVERS_LIST¬ß¬ß");
        for (ServerInfo server : servers) {
            response.append(server.getId()).append(":")
                   .append(escape(server.getName())).append(":")
                   .append(escape(server.getDescription())).append(":")
                   .append(server.getCreatedBy()).append(",");
        }
        if (response.charAt(response.length() - 1) == ',') {
            response.setLength(response.length() - 1);
        }
        sendMessage(response.toString());
    }

    private void handleAddServerMember(long serverId, String username) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        if (!databaseManager.isServerAdmin(serverId, this.clientName)) {
            sendMessage("SERVER_MEMBER_ADDED¬ß¬ßERROR¬ß¬ß–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (!databaseManager.verifyUser(username, "")) { // –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            sendMessage("SERVER_MEMBER_ADDED¬ß¬ßERROR¬ß¬ß–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        boolean ok = databaseManager.addServerMember(serverId, username, false);
        if (ok) {
            sendMessage("SERVER_MEMBER_ADDED¬ß¬ßOK¬ß¬ß" + username);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ClientHandler newMember = findClientByName(username);
            if (newMember != null) {
                ServerInfo serverInfo = databaseManager.getServerInfo(serverId);
                newMember.sendMessage(String.format("SERVER_INVITE¬ß¬ß%d¬ß¬ß%s¬ß¬ß%s", serverId, serverInfo.getName(), this.clientName));
            }
        } else {
            sendMessage("SERVER_MEMBER_ADDED¬ß¬ßERROR¬ß¬ß–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞");
        }
    }

    private void handleServerMessage(long serverId, String message) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        if (!databaseManager.isServerMember(serverId, this.clientName)) {
            sendMessage("SERVER_MSG_SENT¬ß¬ßERROR¬ß¬ß–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞");
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
        List<String> members = databaseManager.getServerMembers(serverId);
        String timestamp = getTimestamp();
        String formattedMsg = String.format("SERVER_MSG¬ß¬ß%s¬ß¬ß%s¬ß¬ß%d¬ß¬ß%s", timestamp, this.clientName, serverId, message);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        databaseManager.saveMessage("SERVER", timestamp, this.clientName, "SERVER_" + serverId, message);

        for (String member : members) {
            ClientHandler memberHandler = findClientByName(member);
            if (memberHandler != null) {
                memberHandler.sendMessage(formattedMsg);
            }
        }
    }

    private String escape(String s) { return s == null ? "" : s.replace("\n", "\\n"); }
    private String unescape(String s) { return s == null ? "" : s.replace("\\n", "\n"); }

    private void handleFileOffer(String recipientName, String filename, long filesize, String previewData) {
        ClientHandler recipient = findClientByName(recipientName);
        if (recipient != null) {
            recipient.sendMessage(String.format("FILE_INCOMING¬ß¬ß%s¬ß¬ß%s¬ß¬ß%d¬ß¬ß%s", this.clientName, filename, filesize, previewData));
        }
    }

    private void handleFileAccept(String originalSenderName, String filename) {
        ClientHandler sender = findClientByName(originalSenderName);
        if (sender != null) {
            System.out.println(clientName + " –ø—Ä–∏–Ω—è–ª —Ñ–∞–π–ª '" + filename + "' –æ—Ç " + originalSenderName + ". –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∑–∞–≥—Ä—É–∑–∫—É.");
            sender.sendMessage(String.format("UPLOAD_START¬ß¬ß%s¬ß¬ß%s", this.clientName, filename));
        }
    }

    private void handleFileDecline(String originalSenderName, String filename) {
        ClientHandler sender = findClientByName(originalSenderName);
        if (sender != null) {
            sender.sendMessage(String.format("SYS_MSG¬ß¬ß%s –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à —Ñ–∞–π–ª '%s'", this.clientName, filename));
        }
    }

    private void handleFileChunk(String recipientName, String fileName, String base64ChunkData) {
        String fileKey = this.clientName + "->" + recipientName + "::" + fileName;
        try {
            FileOutputStream fos = activeFileUploads.computeIfAbsent(fileKey, key -> {
                try {
                    File tempFile = File.createTempFile("chat_upload_", "_" + fileName);
                    tempFiles.put(key, tempFile);
                    System.out.println("–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: " + tempFile.getAbsolutePath());
                    return new FileOutputStream(tempFile);
                } catch (IOException e) { throw new UncheckedIOException(e); }
            });
            fos.write(Base64.getDecoder().decode(base64ChunkData));
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FILE_CHUNK –¥–ª—è –∫–ª—é—á–∞ " + fileKey + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void handleFileEnd(String recipientName, String fileName) {
        String fileKey = this.clientName + "->" + recipientName + "::" + fileName;
        FileOutputStream fos = activeFileUploads.remove(fileKey);
        File tempFile = tempFiles.remove(fileKey);
        if (fos != null && tempFile != null) {
            try {
                fos.close();
                System.out.println("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '" + fileName + "' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: " + tempFile.length() + " –±–∞–π—Ç.");
                ClientHandler recipient = findClientByName(recipientName);
                if (recipient != null) {
                    fileTransferManager.prepareDownloadLink(tempFile, fileName, recipient);
                } else {
                    tempFile.delete();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private ClientHandler findClientByName(String name) {
        synchronized(clients) {
            for (ClientHandler client : clients) {
                if (client.getClientName().equals(name)) return client;
            }
        }
        return null;
    }

    private void sendPrivateMessage(String recipientName, String message) {
        ClientHandler recipientHandler = findClientByName(recipientName);
        String formattedMsg = String.format("PRIV_MSG¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s¬ß¬ß%s", getTimestamp(), this.clientName, recipientName, message);
        if (recipientHandler != null) {
            recipientHandler.sendMessage(formattedMsg);
        }
        this.sendMessage(formattedMsg);
    }

    private void sendUsersListToAll() {
        StringBuilder usersList = new StringBuilder("USERS_LIST¬ß¬ß");
        synchronized (clients) {
            for (ClientHandler client : clients) {
                usersList.append(client.getClientName()).append(",");
            }
        }
        if (usersList.length() > "USERS_LIST¬ß¬ß".length() && usersList.charAt(usersList.length() - 1) == ',') {
            usersList.setLength(usersList.length() - 1);
        }
        broadcastMessage(usersList.toString());
    }

    private void broadcastMessage(String message) {
        synchronized (clients) {
            for (ClientHandler client : clients) {
                client.sendMessage(message);
            }
        }
    }

    public void sendMessage(String message) {
        if (out != null) {
            out.println(message);
        }
    }

    private String getTimestamp() {
        return LocalDateTime.now().format(dtf);
    }

    // ====== Voice Call helpers ======
    private void handleVoiceInvite(String callee) {
        ClientHandler r = findClientByName(callee);
        if (r != null) {
            r.sendMessage("VOICE_INVITE¬ß¬ß" + this.clientName);
        } else {
            sendMessage("SYS_MSG¬ß¬ß–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞");
        }
    }

    private void handleVoiceAccept(String caller) {
        ClientHandler c = findClientByName(caller);
        if (c != null) {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±–æ–∏–º –Ω–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
            c.sendMessage("VOICE_START¬ß¬ß" + this.clientName);
            sendMessage("VOICE_START¬ß¬ß" + caller);
        }
    }

    private void handleVoiceDecline(String caller) {
        ClientHandler c = findClientByName(caller);
        if (c != null) {
            c.sendMessage("VOICE_DECLINED¬ß¬ß" + this.clientName);
        }
    }

    private void handleVoiceEnd(String peer) {
        ClientHandler p = findClientByName(peer);
        if (p != null) {
            p.sendMessage("VOICE_END¬ß¬ß" + this.clientName);
        }
    }

    private void handleVoiceFrame(String recipient, String base64Data) {
        ClientHandler r = findClientByName(recipient);
        if (r != null) {
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–¥—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            r.sendMessage("AUDIO_CHUNK¬ß¬ß" + this.clientName + "¬ß¬ß" + base64Data);
        }
    }

    private void handleScreenStart(String recipient) {
        ClientHandler r = findClientByName(recipient);
        if (r != null) {
            r.sendMessage("SYS_MSG¬ß¬ß" + this.clientName + " –Ω–∞—á–∞–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞.");
        }
    }

    private void handleScreenStop(String recipient) {
        ClientHandler r = findClientByName(recipient);
        if (r != null) {
            r.sendMessage("SYS_MSG¬ß¬ß" + this.clientName + " –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞.");
        }
    }

    private void handleScreenFrame(String recipient, String base64Jpeg) {
        ClientHandler r = findClientByName(recipient);
        if (r != null) {
            r.sendMessage("SCREEN_FRAME¬ß¬ß" + this.clientName + "¬ß¬ß" + base64Jpeg);
        }
    }
}